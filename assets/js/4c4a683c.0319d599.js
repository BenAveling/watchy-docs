"use strict";(self.webpackChunkwatchy=self.webpackChunkwatchy||[]).push([[437],{4532:(t,e,n)=>{n.r(e),n.d(e,{default:()=>C});var c=n(7294);const o="frame_Fqih";class a extends c.Component{render(){return c.createElement("div",{className:"col col--4 "+o},c.createElement("img",{src:this.props.screenshot}),c.createElement("a",{className:"button button--outline button--info",href:this.props.github,target:"_blank"},this.props.name),c.createElement(r,{name:this.props.name,ota_bin:this.props.ota_bin}))}}function r(t){return t.ota_bin?c.createElement("button",{id:t.name,className:"button button--info",onClick:y},"Try it! (beta)"):null}var i="cd77498e-1ac8-48b6-aba8-4161c7342fce",s="86b12865-4b70-4893-8ce6-9864fc00374d",l="86b12867-4b70-4893-8ce6-9864fc00374d",h="86b12866-4b70-4893-8ce6-9864fc00374d";let u=null,f=null,g=null,b=null;var m,p,d,v;const w=512;function y(t){t.preventDefault();let e=t.target.id;navigator.bluetooth.requestDevice({filters:[{services:[i]}],optionalServices:[s]}).then((t=>t.gatt.connect())).then((t=>t.getPrimaryService(s))).then((t=>{u=t})).then((t=>t)).then((t=>function(t){if(!u)return;return u.getCharacteristic(l).then((t=>t.readValue())).then((t=>{"v"+t.getUint8(0)+"."+t.getUint8(1),"v"+t.getUint8(2)+"."+t.getUint8(3)+"."+t.getUint8(4)})).then((function(e){!function(t){let e;e="7_SEG_LIGHT"==t?"7_SEG":t;let n="https://raw.githubusercontent.com/sqfmi/Watchy/master/examples/WatchFaces/"+e+"/"+t+".bin";fetch(n).then((function(t){return t.arrayBuffer()})).then((function(t){return b=t,function(){if(!u)return void console.log("No Watchy Service");m=b.byteLength,p=m,d=0,v=0,u.getCharacteristic(h).then((t=>(f=t,t.startNotifications().then((t=>{f.addEventListener("characteristicvaluechanged",E)}))))).catch((t=>{console.log(t)})),E()}()})).catch((function(t){console.warn("Something went wrong.",t)}))}(t)})).catch((t=>{console.log(t)}))}(e))).catch((t=>{console.log(t)}))}function E(){p>0&&(d=p>=w?w:p,g=b.slice(v,v+d),v+=d,p-=d,console.log("remaining: "+p),u.getCharacteristic(h).then((t=>_(t,g))).then((t=>console.log((v/m*100).toPrecision(3)+"%"))).catch((t=>{console.log(t)})))}function _(t,e){return t.writeValue(e).catch((n=>_(t,e)))}const C=a}}]);